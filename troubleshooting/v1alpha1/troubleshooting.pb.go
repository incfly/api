// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: troubleshooting/v1alpha1/troubleshooting.proto

package v1alpha1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Log level settings of proxy.
type LogLevel int32

const (
	LogLevel_OFF      LogLevel = 0
	LogLevel_CRITICAL LogLevel = 1
	LogLevel_ERROR    LogLevel = 2
	LogLevel_WARN     LogLevel = 3
	LogLevel_INFO     LogLevel = 4
	LogLevel_DEBUG    LogLevel = 5
	LogLevel_TRACE    LogLevel = 6
)

var LogLevel_name = map[int32]string{
	0: "OFF",
	1: "CRITICAL",
	2: "ERROR",
	3: "WARN",
	4: "INFO",
	5: "DEBUG",
	6: "TRACE",
}

var LogLevel_value = map[string]int32{
	"OFF":      0,
	"CRITICAL": 1,
	"ERROR":    2,
	"WARN":     3,
	"INFO":     4,
	"DEBUG":    5,
	"TRACE":    6,
}

func (x LogLevel) String() string {
	return proto.EnumName(LogLevel_name, int32(x))
}

func (LogLevel) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{0}
}

type NodeSelector_NodeType int32

const (
	NodeSelector_proxy  NodeSelector_NodeType = 0
	NodeSelector_ROUTER NodeSelector_NodeType = 1
)

var NodeSelector_NodeType_name = map[int32]string{
	0: "proxy",
	1: "ROUTER",
}

var NodeSelector_NodeType_value = map[string]int32{
	"proxy":  0,
	"ROUTER": 1,
}

func (x NodeSelector_NodeType) String() string {
	return proto.EnumName(NodeSelector_NodeType_name, int32(x))
}

func (NodeSelector_NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{0, 0}
}

// NodeSelector specifies the proxy filtering of the troubleshooting API targetted scope.
// All the fields in this selector are and-ed by each other. Empty fields will selector all the
// proxy.
type NodeSelector struct {
	// The type of the proxy runs as.
	Types []NodeSelector_NodeType `protobuf:"varint,1,rep,packed,name=types,proto3,enum=istio.troubleshooting.v1alpha1.NodeSelector_NodeType" json:"types,omitempty"`
	// The namespaces of the proxy reside in.
	Namespaces []string `protobuf:"bytes,2,rep,name=namespaces,proto3" json:"namespaces,omitempty"`
	// the name of the proxys to be selected. For Kubernetes, this is the pod id.
	Names []string `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	// The labels that selected proxys must have.
	Labels               *NodeSelector_LabelSelector `protobuf:"bytes,4,opt,name=labels,proto3" json:"labels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *NodeSelector) Reset()         { *m = NodeSelector{} }
func (m *NodeSelector) String() string { return proto.CompactTextString(m) }
func (*NodeSelector) ProtoMessage()    {}
func (*NodeSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{0}
}
func (m *NodeSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSelector.Merge(m, src)
}
func (m *NodeSelector) XXX_Size() int {
	return m.Size()
}
func (m *NodeSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSelector.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSelector proto.InternalMessageInfo

func (m *NodeSelector) GetTypes() []NodeSelector_NodeType {
	if m != nil {
		return m.Types
	}
	return nil
}

func (m *NodeSelector) GetNamespaces() []string {
	if m != nil {
		return m.Namespaces
	}
	return nil
}

func (m *NodeSelector) GetNames() []string {
	if m != nil {
		return m.Names
	}
	return nil
}

func (m *NodeSelector) GetLabels() *NodeSelector_LabelSelector {
	if m != nil {
		return m.Labels
	}
	return nil
}

// TODO: shall we refactor proxy.proto workload selector in this PR?
// RESOLVE BEFORE MERGE!
type NodeSelector_LabelSelector struct {
	// One or more labels that indicate a specific set of pods/VMs
	// on which this `proxy` configuration should be applied. The scope of
	// label search is restricted to the configuration namespace in which the
	// the resource is present.
	Labels               map[string]string `protobuf:"bytes,1,rep,name=labels,proto3" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *NodeSelector_LabelSelector) Reset()         { *m = NodeSelector_LabelSelector{} }
func (m *NodeSelector_LabelSelector) String() string { return proto.CompactTextString(m) }
func (*NodeSelector_LabelSelector) ProtoMessage()    {}
func (*NodeSelector_LabelSelector) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{0, 0}
}
func (m *NodeSelector_LabelSelector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NodeSelector_LabelSelector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NodeSelector_LabelSelector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NodeSelector_LabelSelector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NodeSelector_LabelSelector.Merge(m, src)
}
func (m *NodeSelector_LabelSelector) XXX_Size() int {
	return m.Size()
}
func (m *NodeSelector_LabelSelector) XXX_DiscardUnknown() {
	xxx_messageInfo_NodeSelector_LabelSelector.DiscardUnknown(m)
}

var xxx_messageInfo_NodeSelector_LabelSelector proto.InternalMessageInfo

func (m *NodeSelector_LabelSelector) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

// GetConfigDumpRequest is the request of GetConfigDump.
type GetConfigDumpRequest struct {
	// Selector selects a subset of the proxys for troubleshooting.
	Selector             *NodeSelector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GetConfigDumpRequest) Reset()         { *m = GetConfigDumpRequest{} }
func (m *GetConfigDumpRequest) String() string { return proto.CompactTextString(m) }
func (*GetConfigDumpRequest) ProtoMessage()    {}
func (*GetConfigDumpRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{1}
}
func (m *GetConfigDumpRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConfigDumpRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConfigDumpRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConfigDumpRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigDumpRequest.Merge(m, src)
}
func (m *GetConfigDumpRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetConfigDumpRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigDumpRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigDumpRequest proto.InternalMessageInfo

func (m *GetConfigDumpRequest) GetSelector() *NodeSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

// GetConfigDumpResponse is the request of GetConfigDump.
type GetConfigDumpResponse struct {
	// The actual config dump payload.
	Payload              string   `protobuf:"bytes,1,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetConfigDumpResponse) Reset()         { *m = GetConfigDumpResponse{} }
func (m *GetConfigDumpResponse) String() string { return proto.CompactTextString(m) }
func (*GetConfigDumpResponse) ProtoMessage()    {}
func (*GetConfigDumpResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{2}
}
func (m *GetConfigDumpResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConfigDumpResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConfigDumpResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConfigDumpResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConfigDumpResponse.Merge(m, src)
}
func (m *GetConfigDumpResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetConfigDumpResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConfigDumpResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetConfigDumpResponse proto.InternalMessageInfo

func (m *GetConfigDumpResponse) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

type LoggerLogLevel struct {
	// The name of the logger in proxy. For example, "upstream", "connection",
	// etc.
	// TODO(incfly): add validation annotation to ensure the logger name is one of
	// the supported logger.
	LoggerName string `protobuf:"bytes,1,opt,name=logger_name,json=loggerName,proto3" json:"logger_name,omitempty"`
	// The corresponding log level to be set.
	LogLevel             LogLevel `protobuf:"varint,2,opt,name=log_level,json=logLevel,proto3,enum=istio.troubleshooting.v1alpha1.LogLevel" json:"log_level,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoggerLogLevel) Reset()         { *m = LoggerLogLevel{} }
func (m *LoggerLogLevel) String() string { return proto.CompactTextString(m) }
func (*LoggerLogLevel) ProtoMessage()    {}
func (*LoggerLogLevel) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{3}
}
func (m *LoggerLogLevel) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LoggerLogLevel) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LoggerLogLevel.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LoggerLogLevel) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoggerLogLevel.Merge(m, src)
}
func (m *LoggerLogLevel) XXX_Size() int {
	return m.Size()
}
func (m *LoggerLogLevel) XXX_DiscardUnknown() {
	xxx_messageInfo_LoggerLogLevel.DiscardUnknown(m)
}

var xxx_messageInfo_LoggerLogLevel proto.InternalMessageInfo

func (m *LoggerLogLevel) GetLoggerName() string {
	if m != nil {
		return m.LoggerName
	}
	return ""
}

func (m *LoggerLogLevel) GetLogLevel() LogLevel {
	if m != nil {
		return m.LogLevel
	}
	return LogLevel_OFF
}

type SetLogLevelRequest struct {
	// Selector selects a subset of the proxys for troubleshooting.
	Selector *NodeSelector `protobuf:"bytes,1,opt,name=selector,proto3" json:"selector,omitempty"`
	// The log levels to be updated to.
	// Empty list means no change to the existing log level settings of the proxy.
	LoggerLevels         []*LoggerLogLevel `protobuf:"bytes,2,rep,name=logger_levels,json=loggerLevels,proto3" json:"logger_levels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetLogLevelRequest) Reset()         { *m = SetLogLevelRequest{} }
func (m *SetLogLevelRequest) String() string { return proto.CompactTextString(m) }
func (*SetLogLevelRequest) ProtoMessage()    {}
func (*SetLogLevelRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{4}
}
func (m *SetLogLevelRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetLogLevelRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetLogLevelRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetLogLevelRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLogLevelRequest.Merge(m, src)
}
func (m *SetLogLevelRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetLogLevelRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLogLevelRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetLogLevelRequest proto.InternalMessageInfo

func (m *SetLogLevelRequest) GetSelector() *NodeSelector {
	if m != nil {
		return m.Selector
	}
	return nil
}

func (m *SetLogLevelRequest) GetLoggerLevels() []*LoggerLogLevel {
	if m != nil {
		return m.LoggerLevels
	}
	return nil
}

type SetLogLevelResponse struct {
	// ManagedNode managed_node = 1;
	LoggerLevels         []*LoggerLogLevel `protobuf:"bytes,2,rep,name=logger_levels,json=loggerLevels,proto3" json:"logger_levels,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *SetLogLevelResponse) Reset()         { *m = SetLogLevelResponse{} }
func (m *SetLogLevelResponse) String() string { return proto.CompactTextString(m) }
func (*SetLogLevelResponse) ProtoMessage()    {}
func (*SetLogLevelResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{5}
}
func (m *SetLogLevelResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetLogLevelResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetLogLevelResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetLogLevelResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetLogLevelResponse.Merge(m, src)
}
func (m *SetLogLevelResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetLogLevelResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetLogLevelResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetLogLevelResponse proto.InternalMessageInfo

func (m *SetLogLevelResponse) GetLoggerLevels() []*LoggerLogLevel {
	if m != nil {
		return m.LoggerLevels
	}
	return nil
}

// Proxy level troubleshoot request.
type TroubleshootRequest struct {
	// request_id is the the identifier for each troubleshooting session.
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// Types that are valid to be assigned to Request:
	//	*TroubleshootRequest_ConfigDump
	//	*TroubleshootRequest_SetLogLevel
	Request              isTroubleshootRequest_Request `protobuf_oneof:"request"`
	XXX_NoUnkeyedLiteral struct{}                      `json:"-"`
	XXX_unrecognized     []byte                        `json:"-"`
	XXX_sizecache        int32                         `json:"-"`
}

func (m *TroubleshootRequest) Reset()         { *m = TroubleshootRequest{} }
func (m *TroubleshootRequest) String() string { return proto.CompactTextString(m) }
func (*TroubleshootRequest) ProtoMessage()    {}
func (*TroubleshootRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{6}
}
func (m *TroubleshootRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TroubleshootRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TroubleshootRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TroubleshootRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TroubleshootRequest.Merge(m, src)
}
func (m *TroubleshootRequest) XXX_Size() int {
	return m.Size()
}
func (m *TroubleshootRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TroubleshootRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TroubleshootRequest proto.InternalMessageInfo

type isTroubleshootRequest_Request interface {
	isTroubleshootRequest_Request()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TroubleshootRequest_ConfigDump struct {
	ConfigDump *GetConfigDumpRequest `protobuf:"bytes,1001,opt,name=config_dump,json=configDump,proto3,oneof"`
}
type TroubleshootRequest_SetLogLevel struct {
	SetLogLevel *SetLogLevelResponse `protobuf:"bytes,1002,opt,name=set_log_level,json=setLogLevel,proto3,oneof"`
}

func (*TroubleshootRequest_ConfigDump) isTroubleshootRequest_Request()  {}
func (*TroubleshootRequest_SetLogLevel) isTroubleshootRequest_Request() {}

func (m *TroubleshootRequest) GetRequest() isTroubleshootRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *TroubleshootRequest) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *TroubleshootRequest) GetConfigDump() *GetConfigDumpRequest {
	if x, ok := m.GetRequest().(*TroubleshootRequest_ConfigDump); ok {
		return x.ConfigDump
	}
	return nil
}

func (m *TroubleshootRequest) GetSetLogLevel() *SetLogLevelResponse {
	if x, ok := m.GetRequest().(*TroubleshootRequest_SetLogLevel); ok {
		return x.SetLogLevel
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TroubleshootRequest) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TroubleshootRequest_ConfigDump)(nil),
		(*TroubleshootRequest_SetLogLevel)(nil),
	}
}

// Proxy level troubleshoot response.
type TroubleshootResponse struct {
	// request_id ties this response to the original request with the same request_id.
	RequestId uint64 `protobuf:"varint,1,opt,name=request_id,json=requestId,proto3" json:"request_id,omitempty"`
	// If true, this is the last response for a given request_id. The response will be empty.
	LastResponseToRequest bool `protobuf:"varint,2,opt,name=last_response_to_request,json=lastResponseToRequest,proto3" json:"last_response_to_request,omitempty"`
	// Types that are valid to be assigned to Response:
	//	*TroubleshootResponse_ConfigDump
	//	*TroubleshootResponse_LogLevels
	Response             isTroubleshootResponse_Response `protobuf_oneof:"response"`
	XXX_NoUnkeyedLiteral struct{}                        `json:"-"`
	XXX_unrecognized     []byte                          `json:"-"`
	XXX_sizecache        int32                           `json:"-"`
}

func (m *TroubleshootResponse) Reset()         { *m = TroubleshootResponse{} }
func (m *TroubleshootResponse) String() string { return proto.CompactTextString(m) }
func (*TroubleshootResponse) ProtoMessage()    {}
func (*TroubleshootResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d9fca2f482bbaff3, []int{7}
}
func (m *TroubleshootResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TroubleshootResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TroubleshootResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TroubleshootResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TroubleshootResponse.Merge(m, src)
}
func (m *TroubleshootResponse) XXX_Size() int {
	return m.Size()
}
func (m *TroubleshootResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TroubleshootResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TroubleshootResponse proto.InternalMessageInfo

type isTroubleshootResponse_Response interface {
	isTroubleshootResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type TroubleshootResponse_ConfigDump struct {
	ConfigDump *GetConfigDumpResponse `protobuf:"bytes,1001,opt,name=config_dump,json=configDump,proto3,oneof"`
}
type TroubleshootResponse_LogLevels struct {
	LogLevels *SetLogLevelResponse `protobuf:"bytes,1002,opt,name=log_levels,json=logLevels,proto3,oneof"`
}

func (*TroubleshootResponse_ConfigDump) isTroubleshootResponse_Response() {}
func (*TroubleshootResponse_LogLevels) isTroubleshootResponse_Response()  {}

func (m *TroubleshootResponse) GetResponse() isTroubleshootResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *TroubleshootResponse) GetRequestId() uint64 {
	if m != nil {
		return m.RequestId
	}
	return 0
}

func (m *TroubleshootResponse) GetLastResponseToRequest() bool {
	if m != nil {
		return m.LastResponseToRequest
	}
	return false
}

func (m *TroubleshootResponse) GetConfigDump() *GetConfigDumpResponse {
	if x, ok := m.GetResponse().(*TroubleshootResponse_ConfigDump); ok {
		return x.ConfigDump
	}
	return nil
}

func (m *TroubleshootResponse) GetLogLevels() *SetLogLevelResponse {
	if x, ok := m.GetResponse().(*TroubleshootResponse_LogLevels); ok {
		return x.LogLevels
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*TroubleshootResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*TroubleshootResponse_ConfigDump)(nil),
		(*TroubleshootResponse_LogLevels)(nil),
	}
}

func init() {
	proto.RegisterEnum("istio.troubleshooting.v1alpha1.LogLevel", LogLevel_name, LogLevel_value)
	proto.RegisterEnum("istio.troubleshooting.v1alpha1.NodeSelector_NodeType", NodeSelector_NodeType_name, NodeSelector_NodeType_value)
	proto.RegisterType((*NodeSelector)(nil), "istio.troubleshooting.v1alpha1.NodeSelector")
	proto.RegisterType((*NodeSelector_LabelSelector)(nil), "istio.troubleshooting.v1alpha1.NodeSelector.LabelSelector")
	proto.RegisterMapType((map[string]string)(nil), "istio.troubleshooting.v1alpha1.NodeSelector.LabelSelector.LabelsEntry")
	proto.RegisterType((*GetConfigDumpRequest)(nil), "istio.troubleshooting.v1alpha1.GetConfigDumpRequest")
	proto.RegisterType((*GetConfigDumpResponse)(nil), "istio.troubleshooting.v1alpha1.GetConfigDumpResponse")
	proto.RegisterType((*LoggerLogLevel)(nil), "istio.troubleshooting.v1alpha1.LoggerLogLevel")
	proto.RegisterType((*SetLogLevelRequest)(nil), "istio.troubleshooting.v1alpha1.SetLogLevelRequest")
	proto.RegisterType((*SetLogLevelResponse)(nil), "istio.troubleshooting.v1alpha1.SetLogLevelResponse")
	proto.RegisterType((*TroubleshootRequest)(nil), "istio.troubleshooting.v1alpha1.TroubleshootRequest")
	proto.RegisterType((*TroubleshootResponse)(nil), "istio.troubleshooting.v1alpha1.TroubleshootResponse")
}

func init() {
	proto.RegisterFile("troubleshooting/v1alpha1/troubleshooting.proto", fileDescriptor_d9fca2f482bbaff3)
}

var fileDescriptor_d9fca2f482bbaff3 = []byte{
	// 792 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0x4b, 0x8f, 0xea, 0x54,
	0x1c, 0xc0, 0x39, 0x3c, 0xcb, 0xbf, 0x30, 0x69, 0xce, 0x9d, 0x9b, 0x34, 0x18, 0x11, 0x9b, 0x98,
	0x10, 0x63, 0xe0, 0x4e, 0xc7, 0x1b, 0xf5, 0xee, 0x06, 0x2e, 0xcc, 0x10, 0x11, 0xcc, 0x81, 0xf1,
	0x31, 0x0b, 0x6b, 0x81, 0x33, 0x9d, 0x6a, 0xe1, 0xd4, 0x9e, 0x42, 0x86, 0x95, 0x7e, 0x0d, 0x37,
	0x7e, 0x00, 0xe3, 0xce, 0xf8, 0x1d, 0x5c, 0xfa, 0x11, 0xcc, 0xec, 0x74, 0xef, 0xde, 0xf4, 0x39,
	0x65, 0xc2, 0x88, 0xa0, 0x77, 0xf7, 0x7f, 0x9c, 0xff, 0xeb, 0x77, 0xfe, 0x3d, 0x29, 0x34, 0x5c,
	0x87, 0x2d, 0x27, 0x16, 0xe5, 0x37, 0x8c, 0xb9, 0xe6, 0xc2, 0x68, 0xae, 0x4e, 0x74, 0xcb, 0xbe,
	0xd1, 0x4f, 0x9a, 0x0f, 0x1c, 0x0d, 0xdb, 0x61, 0x2e, 0xc3, 0x55, 0x93, 0xbb, 0x26, 0x7b, 0x18,
	0xd5, 0x88, 0xa2, 0x2a, 0x55, 0x83, 0x31, 0xc3, 0xa2, 0x4d, 0xff, 0xf4, 0x64, 0x79, 0xdd, 0x9c,
	0x2d, 0x1d, 0xdd, 0x35, 0xd9, 0x22, 0x88, 0x57, 0x7e, 0xc9, 0x40, 0x69, 0xc0, 0x66, 0x74, 0x44,
	0x2d, 0x3a, 0x75, 0x99, 0x83, 0x3f, 0x84, 0x9c, 0xbb, 0xb6, 0x29, 0x97, 0x51, 0x2d, 0x53, 0x3f,
	0x52, 0x9f, 0x37, 0xfe, 0xb9, 0x40, 0x23, 0x19, 0xec, 0x2b, 0xe3, 0xb5, 0x4d, 0x49, 0x90, 0x03,
	0x57, 0x01, 0x16, 0xfa, 0x9c, 0x72, 0x5b, 0x9f, 0x52, 0x2e, 0xa7, 0x6b, 0x99, 0x7a, 0x91, 0x24,
	0x2c, 0xf8, 0x18, 0x72, 0xbe, 0x26, 0x67, 0x7c, 0x57, 0xa0, 0x60, 0x02, 0x79, 0x4b, 0x9f, 0x50,
	0x8b, 0xcb, 0xd9, 0x1a, 0xaa, 0x8b, 0xea, 0x8b, 0xbd, 0x7a, 0xe8, 0x7b, 0xa1, 0x91, 0x46, 0xc2,
	0x4c, 0x95, 0x1f, 0x11, 0x94, 0x37, 0x3c, 0xf8, 0x8b, 0xb8, 0x8a, 0x37, 0xa9, 0xa8, 0x76, 0x0f,
	0xaf, 0x12, 0x68, 0xbc, 0xb3, 0x70, 0x9d, 0x75, 0x5c, 0xf1, 0x03, 0x10, 0x13, 0x66, 0x2c, 0x41,
	0xe6, 0x6b, 0xba, 0x96, 0x51, 0x0d, 0xd5, 0x8b, 0xc4, 0x13, 0xbd, 0xe1, 0x57, 0xba, 0xb5, 0xa4,
	0x72, 0xda, 0xb7, 0x05, 0xca, 0x8b, 0xf4, 0xfb, 0x48, 0x79, 0x13, 0x84, 0x88, 0x24, 0x2e, 0x42,
	0xce, 0x76, 0xd8, 0xed, 0x5a, 0x4a, 0x61, 0x80, 0x3c, 0x19, 0x5e, 0x8e, 0x3b, 0x44, 0x42, 0xca,
	0x97, 0x70, 0x7c, 0x4e, 0xdd, 0x36, 0x5b, 0x5c, 0x9b, 0xc6, 0xcb, 0xe5, 0xdc, 0x26, 0xf4, 0x9b,
	0x25, 0xe5, 0x2e, 0xbe, 0x00, 0x81, 0x87, 0x5d, 0xf9, 0xb5, 0x44, 0xf5, 0x9d, 0x7d, 0xe6, 0x22,
	0x71, 0xb4, 0x72, 0x02, 0x4f, 0x1f, 0x54, 0xe0, 0x36, 0x5b, 0x70, 0x8a, 0x65, 0x28, 0xd8, 0xfa,
	0xda, 0x62, 0xfa, 0x2c, 0x9c, 0x26, 0x52, 0x95, 0x5b, 0x38, 0xea, 0x33, 0xc3, 0xa0, 0x4e, 0x9f,
	0x19, 0x7d, 0xba, 0xa2, 0x16, 0x7e, 0x03, 0x44, 0xcb, 0xb7, 0x68, 0xde, 0xd5, 0x86, 0xe7, 0x21,
	0x30, 0x0d, 0xf4, 0x39, 0xc5, 0x1d, 0x28, 0x5a, 0xcc, 0xd0, 0x2c, 0xef, 0xb4, 0x0f, 0xe2, 0x48,
	0xad, 0xef, 0x6a, 0x38, 0xca, 0x4e, 0x04, 0x2b, 0x94, 0x94, 0x9f, 0x11, 0xe0, 0x11, 0x75, 0x63,
	0xcf, 0xff, 0x4d, 0x03, 0x8f, 0xa0, 0x1c, 0x0e, 0xe2, 0xb7, 0x1a, 0x2c, 0xb3, 0xa8, 0x36, 0xfe,
	0x45, 0xaf, 0x09, 0x1e, 0xa4, 0x14, 0x24, 0xf1, 0x15, 0xae, 0x7c, 0x05, 0x4f, 0x36, 0x9a, 0x0e,
	0x01, 0xbf, 0x92, 0x5a, 0x7f, 0x21, 0x78, 0x32, 0x4e, 0x44, 0x46, 0x88, 0x5e, 0x07, 0x70, 0x02,
	0x51, 0x33, 0x83, 0x0b, 0xcd, 0x92, 0x62, 0x68, 0xe9, 0xcd, 0xf0, 0x67, 0x20, 0x4e, 0xfd, 0x15,
	0xd0, 0x66, 0xcb, 0xb9, 0x2d, 0xff, 0x51, 0xf0, 0x29, 0xbe, 0xbb, 0xab, 0x95, 0x6d, 0xbb, 0x79,
	0x91, 0x22, 0x30, 0x8d, 0x8d, 0xf8, 0x0a, 0xca, 0x9c, 0xba, 0xda, 0xfd, 0xed, 0xff, 0x19, 0xe4,
	0x3e, 0xdd, 0x95, 0x7b, 0x0b, 0xb2, 0x8b, 0x14, 0x11, 0xf9, 0xbd, 0xb9, 0x55, 0x84, 0x42, 0x38,
	0x82, 0xf2, 0x53, 0x1a, 0x8e, 0x37, 0xe7, 0x0e, 0x29, 0xef, 0x18, 0xfc, 0x3d, 0x90, 0x2d, 0x9d,
	0xbb, 0x9a, 0x13, 0x9e, 0xd7, 0x5c, 0xa6, 0x85, 0x5e, 0x7f, 0x4f, 0x05, 0xf2, 0xd4, 0xf3, 0x47,
	0xe9, 0xc6, 0x2c, 0x02, 0xfa, 0xf9, 0x56, 0x62, 0xcf, 0xf7, 0x24, 0x16, 0xcf, 0x95, 0x44, 0x76,
	0x09, 0x10, 0xe3, 0xe2, 0xff, 0x91, 0x57, 0x31, 0xfa, 0x76, 0x78, 0x0b, 0x40, 0x88, 0xa6, 0x7c,
	0xfb, 0x13, 0x10, 0xe2, 0x8f, 0xb7, 0x00, 0x99, 0x61, 0xb7, 0x2b, 0xa5, 0x70, 0x09, 0x84, 0x36,
	0xe9, 0x8d, 0x7b, 0xed, 0xb3, 0xbe, 0x84, 0xbc, 0x17, 0xa9, 0x43, 0xc8, 0x90, 0x48, 0x69, 0x2c,
	0x40, 0xf6, 0xd3, 0x33, 0x32, 0x90, 0x32, 0x9e, 0xd4, 0x1b, 0x74, 0x87, 0x52, 0xd6, 0x73, 0xbf,
	0xec, 0xb4, 0x2e, 0xcf, 0xa5, 0x9c, 0x27, 0x8e, 0xc9, 0x59, 0xbb, 0x23, 0xe5, 0xd5, 0xef, 0xd3,
	0x50, 0xf9, 0x88, 0xf2, 0x9b, 0xf1, 0x66, 0x97, 0x23, 0xea, 0xac, 0xcc, 0x29, 0xc5, 0xdf, 0x21,
	0x28, 0x6f, 0x10, 0xc0, 0x07, 0xad, 0x58, 0xe5, 0x30, 0xcc, 0x4a, 0xea, 0x19, 0xc2, 0xb7, 0x20,
	0x26, 0x48, 0x61, 0x75, 0x2f, 0xac, 0x41, 0xf5, 0x43, 0xae, 0x42, 0x49, 0xa9, 0x3f, 0x20, 0x78,
	0xed, 0x63, 0xef, 0x8d, 0x7f, 0x04, 0xce, 0xb7, 0x50, 0x4a, 0x7a, 0x76, 0xa3, 0xd9, 0xb6, 0xef,
	0xbb, 0x9b, 0xdb, 0xf2, 0x3a, 0x28, 0xa9, 0x3a, 0x7a, 0x86, 0x5a, 0xa7, 0xbf, 0xde, 0x55, 0xd1,
	0x6f, 0x77, 0x55, 0xf4, 0xfb, 0x5d, 0x15, 0x5d, 0xbd, 0x15, 0xe4, 0x31, 0x59, 0x53, 0xb7, 0xcd,
	0xe6, 0x63, 0xff, 0x2b, 0x93, 0xbc, 0xff, 0x83, 0x71, 0xfa, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff,
	0x88, 0xb5, 0x45, 0x47, 0xd2, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MeshTroubleshootingServiceClient is the client API for MeshTroubleshootingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MeshTroubleshootingServiceClient interface {
	// GetConfigDump gets the config dump of the proxy.
	GetConfigDump(ctx context.Context, in *GetConfigDumpRequest, opts ...grpc.CallOption) (MeshTroubleshootingService_GetConfigDumpClient, error)
	// Set the proxy log level.
	SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error)
}

type meshTroubleshootingServiceClient struct {
	cc *grpc.ClientConn
}

func NewMeshTroubleshootingServiceClient(cc *grpc.ClientConn) MeshTroubleshootingServiceClient {
	return &meshTroubleshootingServiceClient{cc}
}

func (c *meshTroubleshootingServiceClient) GetConfigDump(ctx context.Context, in *GetConfigDumpRequest, opts ...grpc.CallOption) (MeshTroubleshootingService_GetConfigDumpClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MeshTroubleshootingService_serviceDesc.Streams[0], "/istio.troubleshooting.v1alpha1.MeshTroubleshootingService/GetConfigDump", opts...)
	if err != nil {
		return nil, err
	}
	x := &meshTroubleshootingServiceGetConfigDumpClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MeshTroubleshootingService_GetConfigDumpClient interface {
	Recv() (*GetConfigDumpResponse, error)
	grpc.ClientStream
}

type meshTroubleshootingServiceGetConfigDumpClient struct {
	grpc.ClientStream
}

func (x *meshTroubleshootingServiceGetConfigDumpClient) Recv() (*GetConfigDumpResponse, error) {
	m := new(GetConfigDumpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *meshTroubleshootingServiceClient) SetLogLevel(ctx context.Context, in *SetLogLevelRequest, opts ...grpc.CallOption) (*SetLogLevelResponse, error) {
	out := new(SetLogLevelResponse)
	err := c.cc.Invoke(ctx, "/istio.troubleshooting.v1alpha1.MeshTroubleshootingService/SetLogLevel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MeshTroubleshootingServiceServer is the server API for MeshTroubleshootingService service.
type MeshTroubleshootingServiceServer interface {
	// GetConfigDump gets the config dump of the proxy.
	GetConfigDump(*GetConfigDumpRequest, MeshTroubleshootingService_GetConfigDumpServer) error
	// Set the proxy log level.
	SetLogLevel(context.Context, *SetLogLevelRequest) (*SetLogLevelResponse, error)
}

// UnimplementedMeshTroubleshootingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMeshTroubleshootingServiceServer struct {
}

func (*UnimplementedMeshTroubleshootingServiceServer) GetConfigDump(req *GetConfigDumpRequest, srv MeshTroubleshootingService_GetConfigDumpServer) error {
	return status.Errorf(codes.Unimplemented, "method GetConfigDump not implemented")
}
func (*UnimplementedMeshTroubleshootingServiceServer) SetLogLevel(ctx context.Context, req *SetLogLevelRequest) (*SetLogLevelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetLogLevel not implemented")
}

func RegisterMeshTroubleshootingServiceServer(s *grpc.Server, srv MeshTroubleshootingServiceServer) {
	s.RegisterService(&_MeshTroubleshootingService_serviceDesc, srv)
}

func _MeshTroubleshootingService_GetConfigDump_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetConfigDumpRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MeshTroubleshootingServiceServer).GetConfigDump(m, &meshTroubleshootingServiceGetConfigDumpServer{stream})
}

type MeshTroubleshootingService_GetConfigDumpServer interface {
	Send(*GetConfigDumpResponse) error
	grpc.ServerStream
}

type meshTroubleshootingServiceGetConfigDumpServer struct {
	grpc.ServerStream
}

func (x *meshTroubleshootingServiceGetConfigDumpServer) Send(m *GetConfigDumpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MeshTroubleshootingService_SetLogLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetLogLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MeshTroubleshootingServiceServer).SetLogLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/istio.troubleshooting.v1alpha1.MeshTroubleshootingService/SetLogLevel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MeshTroubleshootingServiceServer).SetLogLevel(ctx, req.(*SetLogLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MeshTroubleshootingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "istio.troubleshooting.v1alpha1.MeshTroubleshootingService",
	HandlerType: (*MeshTroubleshootingServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SetLogLevel",
			Handler:    _MeshTroubleshootingService_SetLogLevel_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetConfigDump",
			Handler:       _MeshTroubleshootingService_GetConfigDump_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "troubleshooting/v1alpha1/troubleshooting.proto",
}

// ProxyTroubleshootingServiceClient is the client API for ProxyTroubleshootingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ProxyTroubleshootingServiceClient interface {
	// TroubleShoot request on proxy level.
	// Note in the actual architecture, we have proxy level agent, e.g. pilot agent, connecting to the
	// centralized control plane (istiod or pilot). Thus from gRPC's point of view, centralized control
	// plane is the server. But when troubleshooting API is used, centralized control plane initiates
	// workflow. This is why we have response/request in reversed position.
	Troubleshoot(ctx context.Context, opts ...grpc.CallOption) (ProxyTroubleshootingService_TroubleshootClient, error)
}

type proxyTroubleshootingServiceClient struct {
	cc *grpc.ClientConn
}

func NewProxyTroubleshootingServiceClient(cc *grpc.ClientConn) ProxyTroubleshootingServiceClient {
	return &proxyTroubleshootingServiceClient{cc}
}

func (c *proxyTroubleshootingServiceClient) Troubleshoot(ctx context.Context, opts ...grpc.CallOption) (ProxyTroubleshootingService_TroubleshootClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ProxyTroubleshootingService_serviceDesc.Streams[0], "/istio.troubleshooting.v1alpha1.ProxyTroubleshootingService/Troubleshoot", opts...)
	if err != nil {
		return nil, err
	}
	x := &proxyTroubleshootingServiceTroubleshootClient{stream}
	return x, nil
}

type ProxyTroubleshootingService_TroubleshootClient interface {
	Send(*TroubleshootResponse) error
	Recv() (*TroubleshootRequest, error)
	grpc.ClientStream
}

type proxyTroubleshootingServiceTroubleshootClient struct {
	grpc.ClientStream
}

func (x *proxyTroubleshootingServiceTroubleshootClient) Send(m *TroubleshootResponse) error {
	return x.ClientStream.SendMsg(m)
}

func (x *proxyTroubleshootingServiceTroubleshootClient) Recv() (*TroubleshootRequest, error) {
	m := new(TroubleshootRequest)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProxyTroubleshootingServiceServer is the server API for ProxyTroubleshootingService service.
type ProxyTroubleshootingServiceServer interface {
	// TroubleShoot request on proxy level.
	// Note in the actual architecture, we have proxy level agent, e.g. pilot agent, connecting to the
	// centralized control plane (istiod or pilot). Thus from gRPC's point of view, centralized control
	// plane is the server. But when troubleshooting API is used, centralized control plane initiates
	// workflow. This is why we have response/request in reversed position.
	Troubleshoot(ProxyTroubleshootingService_TroubleshootServer) error
}

// UnimplementedProxyTroubleshootingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedProxyTroubleshootingServiceServer struct {
}

func (*UnimplementedProxyTroubleshootingServiceServer) Troubleshoot(srv ProxyTroubleshootingService_TroubleshootServer) error {
	return status.Errorf(codes.Unimplemented, "method Troubleshoot not implemented")
}

func RegisterProxyTroubleshootingServiceServer(s *grpc.Server, srv ProxyTroubleshootingServiceServer) {
	s.RegisterService(&_ProxyTroubleshootingService_serviceDesc, srv)
}

func _ProxyTroubleshootingService_Troubleshoot_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProxyTroubleshootingServiceServer).Troubleshoot(&proxyTroubleshootingServiceTroubleshootServer{stream})
}

type ProxyTroubleshootingService_TroubleshootServer interface {
	Send(*TroubleshootRequest) error
	Recv() (*TroubleshootResponse, error)
	grpc.ServerStream
}

type proxyTroubleshootingServiceTroubleshootServer struct {
	grpc.ServerStream
}

func (x *proxyTroubleshootingServiceTroubleshootServer) Send(m *TroubleshootRequest) error {
	return x.ServerStream.SendMsg(m)
}

func (x *proxyTroubleshootingServiceTroubleshootServer) Recv() (*TroubleshootResponse, error) {
	m := new(TroubleshootResponse)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ProxyTroubleshootingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "istio.troubleshooting.v1alpha1.ProxyTroubleshootingService",
	HandlerType: (*ProxyTroubleshootingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Troubleshoot",
			Handler:       _ProxyTroubleshootingService_Troubleshoot_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "troubleshooting/v1alpha1/troubleshooting.proto",
}

func (m *NodeSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Labels != nil {
		{
			size, err := m.Labels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTroubleshooting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Names) > 0 {
		for iNdEx := len(m.Names) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Names[iNdEx])
			copy(dAtA[i:], m.Names[iNdEx])
			i = encodeVarintTroubleshooting(dAtA, i, uint64(len(m.Names[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Namespaces) > 0 {
		for iNdEx := len(m.Namespaces) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Namespaces[iNdEx])
			copy(dAtA[i:], m.Namespaces[iNdEx])
			i = encodeVarintTroubleshooting(dAtA, i, uint64(len(m.Namespaces[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Types) > 0 {
		dAtA3 := make([]byte, len(m.Types)*10)
		var j2 int
		for _, num := range m.Types {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintTroubleshooting(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NodeSelector_LabelSelector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NodeSelector_LabelSelector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NodeSelector_LabelSelector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Labels) > 0 {
		for k := range m.Labels {
			v := m.Labels[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintTroubleshooting(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTroubleshooting(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTroubleshooting(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetConfigDumpRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigDumpRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConfigDumpRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Selector != nil {
		{
			size, err := m.Selector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTroubleshooting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetConfigDumpResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConfigDumpResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConfigDumpResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTroubleshooting(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *LoggerLogLevel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LoggerLogLevel) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LoggerLogLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.LogLevel != 0 {
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.LogLevel))
		i--
		dAtA[i] = 0x10
	}
	if len(m.LoggerName) > 0 {
		i -= len(m.LoggerName)
		copy(dAtA[i:], m.LoggerName)
		i = encodeVarintTroubleshooting(dAtA, i, uint64(len(m.LoggerName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetLogLevelRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLogLevelRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetLogLevelRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LoggerLevels) > 0 {
		for iNdEx := len(m.LoggerLevels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoggerLevels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTroubleshooting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Selector != nil {
		{
			size, err := m.Selector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTroubleshooting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetLogLevelResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetLogLevelResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetLogLevelResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.LoggerLevels) > 0 {
		for iNdEx := len(m.LoggerLevels) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LoggerLevels[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTroubleshooting(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	return len(dAtA) - i, nil
}

func (m *TroubleshootRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TroubleshootRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TroubleshootRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Request != nil {
		{
			size := m.Request.Size()
			i -= size
			if _, err := m.Request.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.RequestId != 0 {
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TroubleshootRequest_ConfigDump) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TroubleshootRequest_ConfigDump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConfigDump != nil {
		{
			size, err := m.ConfigDump.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTroubleshooting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *TroubleshootRequest_SetLogLevel) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TroubleshootRequest_SetLogLevel) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SetLogLevel != nil {
		{
			size, err := m.SetLogLevel.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTroubleshooting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func (m *TroubleshootResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TroubleshootResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TroubleshootResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.LastResponseToRequest {
		i--
		if m.LastResponseToRequest {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.RequestId != 0 {
		i = encodeVarintTroubleshooting(dAtA, i, uint64(m.RequestId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *TroubleshootResponse_ConfigDump) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TroubleshootResponse_ConfigDump) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.ConfigDump != nil {
		{
			size, err := m.ConfigDump.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTroubleshooting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xca
	}
	return len(dAtA) - i, nil
}
func (m *TroubleshootResponse_LogLevels) MarshalTo(dAtA []byte) (int, error) {
	return m.MarshalToSizedBuffer(dAtA[:m.Size()])
}

func (m *TroubleshootResponse_LogLevels) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.LogLevels != nil {
		{
			size, err := m.LogLevels.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTroubleshooting(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3e
		i--
		dAtA[i] = 0xd2
	}
	return len(dAtA) - i, nil
}
func encodeVarintTroubleshooting(dAtA []byte, offset int, v uint64) int {
	offset -= sovTroubleshooting(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NodeSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Types) > 0 {
		l = 0
		for _, e := range m.Types {
			l += sovTroubleshooting(uint64(e))
		}
		n += 1 + sovTroubleshooting(uint64(l)) + l
	}
	if len(m.Namespaces) > 0 {
		for _, s := range m.Namespaces {
			l = len(s)
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	if len(m.Names) > 0 {
		for _, s := range m.Names {
			l = len(s)
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	if m.Labels != nil {
		l = m.Labels.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *NodeSelector_LabelSelector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Labels) > 0 {
		for k, v := range m.Labels {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTroubleshooting(uint64(len(k))) + 1 + len(v) + sovTroubleshooting(uint64(len(v)))
			n += mapEntrySize + 1 + sovTroubleshooting(uint64(mapEntrySize))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetConfigDumpRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *GetConfigDumpResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *LoggerLogLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.LoggerName)
	if l > 0 {
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if m.LogLevel != 0 {
		n += 1 + sovTroubleshooting(uint64(m.LogLevel))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetLogLevelRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Selector != nil {
		l = m.Selector.Size()
		n += 1 + l + sovTroubleshooting(uint64(l))
	}
	if len(m.LoggerLevels) > 0 {
		for _, e := range m.LoggerLevels {
			l = e.Size()
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SetLogLevelResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LoggerLevels) > 0 {
		for _, e := range m.LoggerLevels {
			l = e.Size()
			n += 1 + l + sovTroubleshooting(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TroubleshootRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovTroubleshooting(uint64(m.RequestId))
	}
	if m.Request != nil {
		n += m.Request.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TroubleshootRequest_ConfigDump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigDump != nil {
		l = m.ConfigDump.Size()
		n += 2 + l + sovTroubleshooting(uint64(l))
	}
	return n
}
func (m *TroubleshootRequest_SetLogLevel) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SetLogLevel != nil {
		l = m.SetLogLevel.Size()
		n += 2 + l + sovTroubleshooting(uint64(l))
	}
	return n
}
func (m *TroubleshootResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RequestId != 0 {
		n += 1 + sovTroubleshooting(uint64(m.RequestId))
	}
	if m.LastResponseToRequest {
		n += 2
	}
	if m.Response != nil {
		n += m.Response.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *TroubleshootResponse_ConfigDump) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConfigDump != nil {
		l = m.ConfigDump.Size()
		n += 2 + l + sovTroubleshooting(uint64(l))
	}
	return n
}
func (m *TroubleshootResponse_LogLevels) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LogLevels != nil {
		l = m.LogLevels.Size()
		n += 2 + l + sovTroubleshooting(uint64(l))
	}
	return n
}

func sovTroubleshooting(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTroubleshooting(x uint64) (n int) {
	return sovTroubleshooting(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NodeSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NodeSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NodeSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v NodeSelector_NodeType
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTroubleshooting
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= NodeSelector_NodeType(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Types = append(m.Types, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTroubleshooting
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthTroubleshooting
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthTroubleshooting
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				if elementCount != 0 && len(m.Types) == 0 {
					m.Types = make([]NodeSelector_NodeType, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v NodeSelector_NodeType
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTroubleshooting
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= NodeSelector_NodeType(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Types = append(m.Types, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Types", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Namespaces", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Namespaces = append(m.Namespaces, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Names", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Names = append(m.Names, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = &NodeSelector_LabelSelector{}
			}
			if err := m.Labels.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NodeSelector_LabelSelector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LabelSelector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LabelSelector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Labels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Labels == nil {
				m.Labels = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTroubleshooting
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTroubleshooting
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTroubleshooting
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTroubleshooting
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTroubleshooting
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthTroubleshooting
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthTroubleshooting
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTroubleshooting(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTroubleshooting
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Labels[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigDumpRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigDumpRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigDumpRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &NodeSelector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConfigDumpResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConfigDumpResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConfigDumpResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *LoggerLogLevel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LoggerLogLevel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LoggerLogLevel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggerName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoggerName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevel", wireType)
			}
			m.LogLevel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogLevel |= LogLevel(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLogLevelRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLogLevelRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLogLevelRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Selector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Selector == nil {
				m.Selector = &NodeSelector{}
			}
			if err := m.Selector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggerLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoggerLevels = append(m.LoggerLevels, &LoggerLogLevel{})
			if err := m.LoggerLevels[len(m.LoggerLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetLogLevelResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetLogLevelResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetLogLevelResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggerLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LoggerLevels = append(m.LoggerLevels, &LoggerLogLevel{})
			if err := m.LoggerLevels[len(m.LoggerLevels)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TroubleshootRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TroubleshootRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TroubleshootRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigDump", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetConfigDumpRequest{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &TroubleshootRequest_ConfigDump{v}
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SetLogLevel", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetLogLevelResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Request = &TroubleshootRequest_SetLogLevel{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TroubleshootResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TroubleshootResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TroubleshootResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RequestId", wireType)
			}
			m.RequestId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RequestId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastResponseToRequest", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LastResponseToRequest = bool(v != 0)
		case 1001:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConfigDump", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &GetConfigDumpResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &TroubleshootResponse_ConfigDump{v}
			iNdEx = postIndex
		case 1002:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogLevels", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SetLogLevelResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &TroubleshootResponse_LogLevels{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTroubleshooting(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTroubleshooting
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTroubleshooting(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTroubleshooting
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTroubleshooting
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTroubleshooting
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthTroubleshooting
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTroubleshooting
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTroubleshooting(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthTroubleshooting
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTroubleshooting = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTroubleshooting   = fmt.Errorf("proto: integer overflow")
)
