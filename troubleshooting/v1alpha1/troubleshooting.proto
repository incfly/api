// Copyright 2019 Istio Authors
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.

syntax = "proto3";

package istio.troubleshooting.v1alpha1;

import "google/protobuf/duration.proto";
import "type/v1beta1/selector.proto";

option go_package = "istio.io/api/troubleshooting/v1alpha1";

// MeshTroubleshootingService is the mesh wide trouble shooting API.
service MeshTroubleshootingService{
  // GetConfigDump gets the configuration dump of the proxy.
  rpc GetConfigDump(GetConfigDumpRequest)
    returns(stream GetConfigDumpResponse){
  }

  // Set the proxy log level.
  rpc SetLogLevel(SetLogLevelRequest)
    returns(SetLogLevelResponse){
  }
}

// ProxySelector specifies the proxy filtering of the troubleshooting API targeted scope.
// All the fields in this selector are and-ed together. Empty fields will selector all the
// proxy.
message ProxySelector {
  // The type of the proxy runs as.
  enum NodeType { 
    // Runs as workload sidecar mode.
    SIDECAR = 0;
    // Runs as gateway.
    GATEWAY = 1;
  }

  // The types of the proxy runs as.
  repeated NodeType types = 1;

  // The namespaces of the proxy reside in.
  repeated string namespaces = 2;

  // the names of the proxy to be selected. For Kubernetes, this is the pod id.
  repeated string names = 3;

  // Selector of proxy based on workload labels.
  istio.type.v1beta1.WorkloadSelector selector = 4;
}

// GetConfigDumpRequest is the request of GetConfigDump.
message GetConfigDumpRequest{
  // Selector selects a subset of the proxies for troubleshooting.
  ProxySelector selector = 1;
}

// GetConfigDumpResponse is the request of GetConfigDump.
message GetConfigDumpResponse {
  // The actual configuration dump payload.
  string payload = 1;
}

// Log level settings of proxy.
enum LogLevel {
  OFF = 0;
  CRITICAL = 1;
  ERROR = 2;
  WARN = 3;
  INFO = 4;
  DEBUG = 5;
  TRACE = 6;
}

message LoggerLogLevel {
  // The name of the logger in proxy. For example, "upstream", "connection",
  // etc.
  // TODO(incfly): add validation annotation to ensure the logger name is one of
  // the supported logger.
  string logger_name = 1;

  // The corresponding log level to be set.
  LogLevel log_level = 2;
}

message SetLogLevelRequest {
  // Selector selects a subset of the proxies for troubleshooting.
  ProxySelector selector = 1;

  // The log levels to be updated to.
  // Empty list means no change to the existing log level settings of the proxy.
  repeated LoggerLogLevel logger_levels = 2;
}

message SetLogLevelResponse {
  // ManagedNode managed_node = 1;
  repeated LoggerLogLevel logger_levels = 2;
}

// ProxyTroubleshootingService is exposed by the centralized troubleshooting control plane.
// Proxy agent will connect to this service and stream the troubleshooting information.
service ProxyTroubleshootingService {
  // TroubleShooting request on proxy level.
  // Note in the actual architecture, we have proxy agent, e.g. pilot agent, connecting to the
  // the troubleshooting control plane. From gRPC's point of view, the control
  // plane is the server. But when troubleshooting API is used, the control plane initiates
  // workflow. This is why we have response/request in reversed position.
  rpc Troubleshoot(stream TroubleShootingResponse)
      returns(stream TroubleShootingRequest) {}
}

// Proxy level troubleshooting request.
message TroubleShootingRequest {
  // request_id is the the identifier for each troubleshooting session.
  uint64 request_id = 1;

  // timeout specifies the timeout for the troubleshooting request.
  // We have to specify the timeout in the payload since request flow is reverse
  // direction of the actual gRPC service. 
  google.protobuf.Duration timeout = 2;

  oneof request {
    GetConfigDumpRequest config_dump = 1001;
    SetLogLevelResponse set_log_level = 1002;
  }
}

// Proxy level troubleshoot response.
message TroubleShootingResponse {
  // request_id ties this response to the original request with the same request_id.
  uint64 request_id = 1;

  // If true, this is the last response for a given request_id. The response will be empty.
  bool last_response_to_request = 2;

  oneof response {
    GetConfigDumpResponse config_dump = 1001;
    SetLogLevelResponse log_levels = 1002;
  }
}
